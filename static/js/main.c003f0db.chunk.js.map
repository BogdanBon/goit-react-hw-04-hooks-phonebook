{"version":3,"sources":["components/contactForm/ContactForm.js","components/filter/FilterByName.js","components/contactList/ContactList.js","App.js","customHooks/useLocalStorage.js","index.js","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","App.module.css"],"names":["ContactForm","handlerFormSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","className","s","container","onSubmit","preventDefault","nameId","uuidv4","id","label","htmlFor","input","placeholder","type","onChange","pattern","title","required","btn","FilterByName","filter","nameFinder","ContactList","getContacts","deleteContactFromList","map","item","onClick","App","key","defaultValue","JSON","parse","window","localStorage","getItem","setValue","useEffect","setItem","stringify","useLocalStorage","contacts","setContacts","setFilter","data","find","contact","Notiflix","Notify","failure","noramlizedDataInput","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c003f0db.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ handlerFormSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    let nameId = uuidv4();\n    const updatedState = {\n      id: nameId,\n      name: name,\n      number: number,\n    };\n\n    handlerFormSubmit(updatedState);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.container} onSubmit={handleSubmitForm}>\n      <label className={s.label} htmlFor=\"inputName\">\n        Name\n      </label>\n      <input\n        className={s.input}\n        placeholder=\"e.g. Elon Musk\"\n        type=\"text\"\n        id=\"inputName\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className={s.label} htmlFor=\"inputPhone\">\n        Phone number\n      </label>\n      <input\n        className={s.input}\n        placeholder=\"e.g. +1 310-363-6000 \"\n        id=\"inputPhone\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n      />\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  handlerFormSubmit: PropTypes.func,\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = e => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmitForm = e => {\n//     e.preventDefault();\n//     let nameId = uuidv4();\n//     const updatedState = {\n//       id: nameId,\n//       name: this.state.name,\n//       number: this.state.number,\n//     };\n\n//     this.props.handlerFormSubmit(updatedState);\n\n//     this.setState({\n//       filter: '',\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <form className={s.container} onSubmit={this.handleSubmitForm}>\n//         <label className={s.label} htmlFor=\"inputName\">\n//           Name\n//         </label>\n//         <input\n//           className={s.input}\n//           placeholder=\"e.g. Elon Musk\"\n//           type=\"text\"\n//           id=\"inputName\"\n//           name=\"name\"\n//           value={this.state.name}\n//           onChange={this.handleChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//         <label className={s.label} htmlFor=\"inputPhone\">\n//           Phone number\n//         </label>\n//         <input\n//           className={s.input}\n//           placeholder=\"e.g. +1 310-363-6000 \"\n//           id=\"inputPhone\"\n//           type=\"tel\"\n//           name=\"number\"\n//           value={this.state.number}\n//           onChange={this.handleChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//         />\n//         <button className={s.btn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactForm.propTypes = {\n//   handlerFormSubmit: PropTypes.func,\n// };\n\n// export default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from '../contactForm/ContactForm.module.css';\n\nconst FilterByName = ({ filter, nameFinder }) => {\n  return (\n    <div className={s.container}>\n      <p className={s.label}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className={s.input}\n        placeholder=\"find contact\"\n        onChange={nameFinder}\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n    </div>\n  );\n};\n\nFilterByName.propTypes = {\n  filter: PropTypes.string.isRequired,\n  nameFinder: PropTypes.func,\n};\n\nexport default FilterByName;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ getContacts, deleteContactFromList }) => {\n  return (\n    <div className={s.container}>\n      <ul>\n        {getContacts.map(item => (\n          <li key={item.id} className={s.item}>\n            <span>\n              {item.name}: {item.number}\n            </span>\n            <button\n              className={s.btn}\n              type=\"submit\"\n              onClick={() => deleteContactFromList(item)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  getContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport useLocalStorage from './customHooks/useLocalStorage';\nimport Notiflix from 'notiflix';\nimport ContactForm from './components/contactForm/ContactForm';\nimport FilterByName from './components/filter/FilterByName';\nimport ContactList from './components/contactList/ContactList';\nimport s from './App.module.css';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contactList', []);\n  const [filter, setFilter] = useState('');\n\n  // --------- Check if contact already in contactList and add Contact to list if not  ---------\n\n  const handlerFormSubmit = data => {\n    const findSpecificContact = contacts.find(\n      contact => contact.name === data.name,\n    );\n\n    !findSpecificContact\n      ? setContacts([data, ...contacts])\n      : Notiflix.Notify.failure(\n          `Sorry, but user with name ${data.name} has already registered in contacts. Please specify your name!`,\n        );\n  };\n\n  // --------- Filtering contactList to find specific ---------\n\n  const nameFinder = e => {\n    setFilter(e.target.value);\n  };\n\n  // --------- Getting contactList for render ---------\n\n  const getContacts = () => {\n    const noramlizedDataInput = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(noramlizedDataInput),\n    );\n  };\n\n  // --------- Deleting contact from contactList ---------\n\n  const deleteContactFromList = data => {\n    return setContacts(contacts.filter(contact => contact.id !== data.id));\n  };\n\n  // --------- render ---------\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm handlerFormSubmit={handlerFormSubmit} />\n\n      <h2 className={s.title}>Contacts</h2>\n      <FilterByName filter={filter} nameFinder={nameFinder} />\n      <ContactList\n        getContacts={getContacts()}\n        deleteContactFromList={deleteContactFromList}\n      />\n    </div>\n  );\n}\n\n// --------- propTypes options ---------\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n//   // --------- Check if contact already in contactList and add Contact to list if not  ---------\n\n//   handlerFormSubmit = (data) => {\n//     const findSpecificContact = this.state.contacts.find(\n//       (contact) => contact.name === data.name\n//     );\n\n//     !findSpecificContact\n//       ? this.setState((prevState) => ({\n//           contacts: [data, ...prevState.contacts],\n//         }))\n//       : Notiflix.Notify.failure(\n//           `Sorry, but user with name ${data.name} has already registered in contacts. Please specify your name!`\n//         );\n//   };\n\n//   // --------- Filtering contactList to find specific ---------\n\n//   nameFinder = (e) => {\n//     this.setState({\n//       filter: e.target.value,\n//     });\n//   };\n\n//   // --------- Getting contactList for render ---------\n\n//   getContacts = () => {\n//     const noramlizedDataInput = this.state.filter.toLowerCase();\n\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(noramlizedDataInput)\n//     );\n//   };\n\n//   // --------- Deleting contact from contactList ---------\n\n//   deleteContactFromList = (data) => {\n//     return this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter((contact) => contact.id !== data.id),\n//     }));\n//   };\n\n//   // --------- Add data to localStorage and get data from localStorage ---------\n\n//   componentDidMount() {\n//     const savedContactList = localStorage.getItem(\"contactList\");\n//     const parsedContactList = JSON.parse(savedContactList);\n\n//     if (parsedContactList) {\n//       this.setState({ contacts: parsedContactList });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem(\"contactList\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   // --------- render ---------\n\n//   render() {\n//     return (\n//       <div className={s.container}>\n//         <h1 className={s.title}>Phonebook</h1>\n//         <ContactForm handlerFormSubmit={this.handlerFormSubmit} />\n\n//         <h2 className={s.title}>Contacts</h2>\n//         <FilterByName filter={this.state.filter} nameFinder={this.nameFinder} />\n//         <ContactList\n//           getContacts={this.getContacts()}\n//           deleteContactFromList={this.deleteContactFromList}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// // --------- propTypes options ---------\n\n// App.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n// };\n\n// export default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [value, setValue] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1YCLE\",\"label\":\"ContactForm_label__3cSwc\",\"input\":\"ContactForm_input__2u7Lv\",\"btn\":\"ContactForm_btn__2Kwxa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__JEZmi\",\"item\":\"ContactList_item__3_vMR\",\"btn\":\"ContactList_btn__2LqVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"title\":\"App_title__-GfWs\"};"],"sourceRoot":""}